#!/usr/bin/python
#This script has been tested using the otu table rendered by QIIME 1.9 and taxonomies from Greengenes and Silva 

import argparse, re

def fix_taxonomies(input, separator, replacer): # convert taxonomy string into list and remove empty levels
	samples = ""
	taxa_list = []
	otu_table = []
	
	file = open(input, "r")
	for line in file:
		line = line.strip().replace(replacer,"Unclassified").split("\t")
		
		if re.search("^#OTU", line[0]):
			samples = line[1:-1]					
		if not re.search("^#", line[0]):	
			taxa = line[-1].split(separator)			
			for i in range(0,len(taxa)):
				if re.search("__(;|$)", taxa[i]) or taxa[i]=="":
					taxa[i] = "Unclassified"		
			if len(taxa)!=7:
				taxa      = taxa + (7-len(taxa))*["Unclassified"]
			
			full_entry = line[:-1] + taxa + (7-len(taxa))*["Unclassified"]	
			taxa_list.append(taxa)
			otu_table.append(full_entry)
	
	file.close()
	return (taxa_list, otu_table, samples)
	
def group_by_level(taxonomies, level):
	hash = {}
	for t in taxonomies:
		t = "\t".join(t[:level])
		hash[t] = ""
	return hash
	
def add_values(taxonomies_grouped, otu_table, samples, level): # list, hash, list, int
	
	for i in range(0,len(otu_table)):
		index = len(samples)+1
		taxa = "\t".join(otu_table[i][index:index+level])
		otu_table[i].append(taxa)

	for key in taxonomies_grouped:
		taxonomies_grouped[key] = [0,0,0]*len(samples) + [0] # #reasd,%,#otus
	
	SUM = [0] * len(samples)
	for entry in otu_table:
		entry = entry[1:]
		taxa = entry[-1]
		isShared = 0
		nreads = 0
		otu = 0
		for i in range(0,len(samples)):
			j = i * 3
			nreads = float(entry[i])
			if nreads > 0: otu = 1
			if nreads == 0: otu = 0  
			taxonomies_grouped[taxa][j]   = taxonomies_grouped[taxa][j] + nreads
			taxonomies_grouped[taxa][j+1] = taxonomies_grouped[taxa][j+1] + nreads
			taxonomies_grouped[taxa][j+2] = taxonomies_grouped[taxa][j+2] + otu
			 
			isShared = isShared + otu			 
			SUM[i] = SUM[i] + nreads  
		
		if isShared == len(samples):
			taxonomies_grouped[taxa][-1] = taxonomies_grouped[taxa][-1] + 1

	for key in taxonomies_grouped:
		for i in range(0, len(samples)):
			j = i * 3
			taxonomies_grouped[key][j] = (float(taxonomies_grouped[key][j]) / SUM[i] ) * 100
	
	return taxonomies_grouped

def summary_level(otu_table, samples):
	RANK = ["Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species"]
	SUMMARY = {}
	for r in RANK:
		SUMMARY[r] = [0,0]*len(samples)
	
	
	
	for i in range(0, len(samples) ):
		
		for j in range(0, len(RANK)):
			j_taxa = j + len(samples) + 1
			for k in range(0, len(otu_table)):
				if "Unclassified"  not in otu_table[k][j_taxa] and float(otu_table[k][i+1]) > 0:
					taxa = RANK[j]
					i_aux = i * 2
					SUMMARY[taxa][i_aux]    = SUMMARY[taxa][i_aux]   + float(otu_table[k][i+1])   # abundance
					SUMMARY[taxa][i_aux+1]  = SUMMARY[taxa][i_aux+1] + 1                          # otus
				
	
	SUM = [0,0]*len(samples)
	for i in range(0,len(samples)):
		nreads = 0
		otus = 0
		for entry in otu_table:
			nreads = nreads + float(entry[i+1])
			if float(entry[i+1]) > 0 :
				otus = otus + 1
				
		j = i * 2		
		SUM[j] = nreads
		SUM[j+1] = otus
	
	print "\n===== SUMMARY =====\n"
	print SUM, "total"
	for key in RANK:
		print SUMMARY[key], key

	
	#imprimir el numero de lecturas y otus classificados por nivel desde dominio a especie	
	
def write_output(taxonomies_grouped, samples, level, output):
	RANK = ["Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species"]
	HEADER = RANK[:level]
	header_aux = [", %", ", #", ", OTUS"]
	for i in samples:
		for j in header_aux:
			HEADER.append(i+j)
	
	HEADER.append("Shared OTUs")
	HEADER = "\t".join(HEADER) + "\n"
	
	file = open(output, "w")
	file.write(HEADER)	
	for key in taxonomies_grouped:
		s = [str(x) for x in taxonomies_grouped[key]]
		s = "\t".join(s)
		out = key + "\t" + s + "\n"
		file.write(out)
	file.close()
	

def main():
	parser = argparse.ArgumentParser(description='Summarize taxonomies by taxonomic levels')
	parser.add_argument("-i", "--input" , dest="input",  help='OTU table generated by QIIME')
	parser.add_argument("-o", "--output", dest="output",  help='Output file name')
	parser.add_argument("-L", "--level", dest="level", default=2, type=int, help="select taxonomic level to analize. Default=2 (Phylum)")
	parser.add_argument("-s", "--separator", dest="separator", default="; ", help="separator for taxonomy levels. Default='; '")
	parser.add_argument("-r", "--replacer", dest="replacer", default="Ambiguous_taxa", help="String to replace for Unclassified. Default='Ambiguous_taxa'")

	args = parser.parse_args()
	print "Input:  ", args.input
	print "Output: ", args.output
	print "Level:  ", args.level
	print "Separator:  '%s'" % (args.separator)
	print "Replacer:", args.replacer

	(taxa_list, otu_table, samples) = fix_taxonomies(args.input, args.separator, args.replacer)		
	taxonomies_grouped = group_by_level(taxa_list, args.level)		
	taxonomies_grouped = add_values(taxonomies_grouped, otu_table, samples, args.level)	
	write_output(taxonomies_grouped, samples, args.level, args.output)	
	summary_level(otu_table, samples)
	 
if __name__ == "__main__":
	main()
